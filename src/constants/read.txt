////////////there is no api for comments delete in the backend
    deleteComments,

 const [deleteModal, setDeleteModal] = useState(false);
 const [commentToDelete, setCommentToDelete] = useState(null);
  
  const confirmDeleteComments = () => {
    deleteComments(commentToDelete);
    setCommentToDelete(null);
    setDeleteModal(false);
  };

  
   const handleDeleteComments = (id) => {
    setDeleteModal(true);
    setCommentToDelete(id);
  };

   onClick={() => handleDeleteComments(items?._id)}
  

  //////////////
  /** @format */

// /** @format */

// // components/ChatWindow.js
// import { useState } from "react";
// import { useAuth } from "@/context/AuthContext";
// import { useChat } from "@/context/chatContext";
// import { ChatMessageIcon } from "@/constants/SvgIcon";

// const ChatWindow = () => {
//   const [newMessage, setNewMessage] = useState("");
//   const { activeThread, messages, sendMessageToUser } = useChat();
//   const { user } = useAuth();

//   const handleSend = async (e) => {
//     e.preventDefault();
//     if (!newMessage.trim()) return;
//     await sendMessageToUser(newMessage);
//     setNewMessage("");
//   };

//   if (!activeThread)
//     return (
//       <div className='flex flex-col w-full h-screen justify-center items-center gap-2'>
//         <ChatMessageIcon />
//         <h3 className='text-xl'>Your messages</h3>
//         <p className='text-sm text-gray-500'>Send a message to start a chat.</p>
//         <button className='bg-sky-500 py-1 px-3 text-white rounded-lg'>
//           Send message
//         </button>
//       </div>
//     );

//   return (
//     <div className='flex-1 p-4 w-full '>
//       <div className='flex items-center gap-2 border-b pb-4'>
//         <img
//           src={activeThread.otherUser.profilePic}
//           className='w-10 h-10 rounded-full'
//         />
//         <h3>{activeThread.otherUser.userName}</h3>
//       </div>

//       <div className='h-[calc(100vh-160px)] overflow-y-auto'>
//         {messages.map((msg) => (
//           <div
//             key={msg.id}
//             className={`p-2 my-2 rounded-lg max-w-[70%] ${
//               msg.sender === user.uid ? "bg-blue-100 ml-auto" : "bg-gray-100"
//             }`}>
//             {msg.text}
//           </div>
//         ))}
//       </div>

//       <form
//         onSubmit={handleSend}
//         className='mt-4 flex gap-2'>
//         <input
//           type='text'
//           value={newMessage}
//           onChange={(e) => setNewMessage(e.target.value)}
//           className='flex-1 border p-2 rounded'
//         />
//         <button
//           type='submit'
//           className='bg-blue-500 text-white p-2 rounded'>
//           Send
//         </button>
//       </form>
//     </div>
//   );
// };
// export default ChatWindow;

 

// import { useAuth } from "@/context/AuthContext";
// import { useChat } from "@/context/chatContext";
// import { EditIcon } from "lucide-react";
// import React, { useState } from "react";
// import ChatModal from "../modals/chat/chatModal";

// const ConversationList = () => {
//   const [isChatOpen, setIsChatOpen] = useState(false);
//   const { conversations, setActiveThread } = useChat();
//   const { user } = useAuth();
//   const tabs = ["Primary", "General", "Requests"];
//   const handleMessageModal = () => {
//     setIsChatOpen(true);
//   };
//   return (
//     <div className='w-[43%] border-r h-screen'>
//       <div className='flex items-center justify-between p-5 mt-5'>
//         <h2 className='text-xl font-bold'>{user?.userName}</h2>
//         <EditIcon
//           className='cursor-pointer'
//           onClick={handleMessageModal}
//         />
//       </div>
//       <div className='flex items-center justify-between p-5 border-b'>
//         {tabs.map((text, i) => (
//           <p
//             key={i}
//             className={`font-semibold text-sm cursor-pointer ${
//               text === "Primary" ? "text-black" : "text-gray-600"
//             }`}>
//             {text}
//           </p>
//         ))}
//       </div>
//       <div>
//         {conversations?.map((convo) => (
//           <div
//             key={convo.id}
//             className='p-2 flex gap-2 hover:bg-gray-100 cursor-pointer'
//             onClick={() => setActiveThread(convo)}>
//             <img
//               className='w-12 h-12 rounded-full'
//               src={user?.profilePic}
//               alt='profilePic'
//             />
//             <div>
//               <h3>{convo.participants.find((id) => id !== user.uid)}</h3>
//               <p className='text-xs text-gray-500'>{convo.lastMessage}</p>
//             </div>
//           </div>
//         ))}
//       </div>
//       <ChatModal
//         isChatOpen={isChatOpen}
//         setIsChatOpen={setIsChatOpen}
//       />
//     </div>
//   );
// };

// export default ConversationList;

/** @format */

// /** @format */
// "use client";
// import React, { useState } from "react";
// import Modal from "../modal/Modal";
// import { CrossIcon } from "@/constants/SvgIcon";
// import { useAuth } from "@/context/AuthContext";

// const ChatModal = ({ isChatOpen, setIsChatOpen }) => {
//   const [searchQuery, setSearchQuery] = useState("");
//   const [selectedUsers, setSelectedUsers] = useState([]); // for multiple users
//   const { allUsers } = useAuth();

//   const filteredUsers = searchQuery
//     ? allUsers.filter(
//         (user) =>
//           user.userName.toLowerCase().includes(searchQuery.toLowerCase()) ||
//           user.fullName?.toLowerCase().includes(searchQuery.toLowerCase())
//       )
//     : [];

//   // Add user to selected list if not already added
//   const handleClickUser = (user) => {
//     const alreadySelected = selectedUsers.some((u) => u._id === user._id);
//     if (!alreadySelected) {
//       setSelectedUsers((prev) => [...prev, user]);
//       setSearchQuery(""); // Clear the search field after selecting
//     }
//   };

//   // Remove user from selected list
//   const handleRemoveUser = (userId) => {
//     setSelectedUsers((prev) => prev.filter((u) => u._id !== userId));
//   };

//   return (
//     <Modal
//       showModal={isChatOpen}
//       setShowModal={setIsChatOpen}>
//       {/* Header */}
//       <div className='flex items-center justify-between p-2 border-b'>
//         <div></div>
//         <h2 className='font-sans font-bold text-center'>New message</h2>
//         <CrossIcon
//           className='w-4 h-4 cursor-pointer'
//           onClick={() => setIsChatOpen(false)}
//         />
//       </div>

//       {/* Form */}
//       <form>
//         {/* Selected users as "chips" + search input */}
//         <div className='px-2 pb-2 flex items-center flex-wrap gap-2 border-b'>
//           <label
//             htmlFor='search'
//             className='font-semibold'>
//             To:
//           </label>
//           {/* Render selected users as chips */}
//           {selectedUsers.map((user) => (
//             <div
//               key={user._id}
//               className='flex items-center bg-blue-100 text-sky-500 font-semibold px-2  rounded-full'>
//               <span className='mr-1'>{user.fullName || user.userName}</span>
//               <button
//                 type='button'
//                 onClick={() => handleRemoveUser(user._id)}
//                 className='text-gray-700 hover:text-gray-900'>
//                 <CrossIcon className='w-3 h-3 text-sky-500' />
//               </button>
//             </div>
//           ))}
//           {/* Search input */}
//           <input
//             id='search'
//             type='text'
//             placeholder='Search...'
//             value={searchQuery}
//             onChange={(e) => setSearchQuery(e.target.value)}
//             className='placeholder:text-gray-500 border-0 focus:outline-none flex-grow min-w-[50px]'
//           />
//         </div>

//         {/* Search results */}
//         <div className='w-full flex flex-col text-gray-600 text-sm h-[50vh] p-5 overflow-auto'>
//           {/* Show results only if searchQuery is not empty */}
//           {searchQuery ? (
//             filteredUsers.length > 0 ? (
//               filteredUsers.map((user) => (
//                 <div
//                   key={user._id}
//                   className='flex items-center gap-2 p-2 cursor-pointer hover:bg-gray-100 rounded'
//                   onClick={() => handleClickUser(user)}>
//                   <img
//                     src={user.profilePic}
//                     alt={user.userName}
//                     className='w-10 h-10 rounded-full'
//                   />
//                   <div>
//                     <p className='font-semibold'>
//                       {user.fullName || user.userName}
//                     </p>
//                     <p className='text-xs text-gray-500'>{user.email}</p>
//                   </div>
//                 </div>
//               ))
//             ) : (
//               <p>No account found.</p>
//             )
//           ) : null}
//         </div>

//         {/* Chat Button */}
//         <div className='p-4'>
//           <button
//             type='button'
//             className={`text-white bg-sky-500 p-3 rounded-lg w-full ${
//               selectedUsers.length === 0 ? "opacity-50 cursor-not-allowed" : ""
//             }`}
//             disabled={selectedUsers.length === 0}>
//             {selectedUsers.length === 0
//               ? "Chat"
//               : `Chat with ${selectedUsers.map((u) => u.userName).join(", ")}`}
//           </button>
//         </div>
//       </form>
//     </Modal>
//   );
// };

// export default ChatModal;
